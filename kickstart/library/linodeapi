#!/usr/bin/env python
# -*- coding: utf-8 -*-

# (c) 2013, akerl
# Written by akerl

from linode.api import Api, ApiError
from time import sleep


def main():
    module = AnsibleModule(
        argument_spec=dict(
            method=dict(required=True),
        ),
        required_together=[['username', 'password']],
        required_one_of=[['username', 'apikey']],
        mutually_exclusive=[['apikey', 'password']],
        check_invalid_arguments=False,
    )
    params = module.params
    if 'apikey' in params:
        try:
            my_api = Api(params['apikey'])
        except ApiError:
            module.fail_json(msg='api key not accepted')
    else:
        my_api = Api()
        try:
            my_api.user_getapikey(
                username=params['username'],
                password=params['password']
            )
        except ApiError:
            module.fail_json(msg='credentials not accepted')

    if params['method'] == 'wait':
        if 'linodeid' not in params:
            module.fail_json(msg='Must supply a Linode ID to wait for')
        while True:
            jobs = my_api.linode_job_list(linodeid=params['linodeid'])
            if not len([x for x in jobs if x['HOST_FINISH_DT'] == '']):
                break
            sleep(5)
        module.exit_json(changed=False, msg='Job queue is empty')
    else:
        try:
            my_call = getattr(my_api, params['method'])
        except AttributeError:
            module.fail_json(msg='invalid api method (should never happen)')

        call_params = params.copy()
        for item in {'username', 'password', 'apikey', 'method'}:
            call_params.pop(item, None)

        try:
            result = my_call(**call_params)
        except ApiError as e:
            module.fail_json(msg='api call failed', **e.value[0])

        module.exit_json(
            changed=False,
            msg='api call succeeded',
            response=result
        )

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()

